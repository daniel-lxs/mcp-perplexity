name: Release and Publish

on:
  push:
    branches:
      - main

permissions:
  contents: write
  actions: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      released: ${{ steps.release.outputs.released }}
      version: ${{ steps.release.outputs.version }}
    concurrency: release

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build "python-semantic-release>=8.0.0,<9.0.0"

    - name: Build package
      run: python -m build

    - name: Python Semantic Release
      id: release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "action@github.com"
        semantic-release version
        semantic-release publish

    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
        retention-days: 5
        if-no-files-found: error

  build:
    needs: release
    if: needs.release.outputs.released == 'true'
    strategy:
      matrix:
        include:
          # Linux build on x86_64
          - os: ubuntu-latest
            platform: linux
            artifact_name: mcp-perplexity-linux-x86_64
            pyinstaller_flags: --strip --clean --noconfirm
          # Windows build on x86_64
          - os: windows-latest
            platform: windows
            artifact_name: mcp-perplexity-windows-x86_64.exe
            pyinstaller_flags: --clean --noconfirm
          # macOS build using universal2 architecture (supports both Intel x86_64 and Apple Silicon ARM64)
          - os: macos-latest
            platform: macos
            artifact_name: mcp-perplexity-macos-universal2
            pyinstaller_flags: --clean --noconfirm --target-arch universal2
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.platform == 'macos' && '3.11' || '3.10' }}
        architecture: x64
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -e .
        
    - name: Install macOS dependencies
      if: matrix.platform == 'macos'
      run: |
        brew install gettext
        brew link gettext --force
        echo "LDFLAGS=-L/usr/local/opt/gettext/lib" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/usr/local/opt/gettext/include" >> $GITHUB_ENV
      shell: bash

    - name: Install UPX (Windows)
      if: matrix.platform == 'windows'
      shell: pwsh
      run: |
        $UPX_VERSION="4.2.1"
        Invoke-WebRequest "https://github.com/upx/upx/releases/download/v$UPX_VERSION/upx-$UPX_VERSION-win64.zip" -OutFile upx.zip
        Expand-Archive upx.zip -DestinationPath $env:GITHUB_WORKSPACE/upx
        echo "UPX_DIR=$env:GITHUB_WORKSPACE/upx/upx-$UPX_VERSION-win64" >> $env:GITHUB_ENV

    - name: Build executable
      run: |
        if [ "${{ matrix.platform }}" = "windows" ] && [ -n "${UPX_DIR}" ]; then
          # Windows with UPX
          pyinstaller mcp-perplexity.spec --distpath dist/${{ matrix.platform }}
        else
          # Linux and macOS
          pyinstaller mcp-perplexity.spec --distpath dist/${{ matrix.platform }}
        fi
      shell: bash

    - name: Rename binary if needed
      run: |
        cd dist/${{ matrix.platform }}
        echo "Files in dist/${{ matrix.platform }} directory:"
        ls -la
        
        # For macOS and Linux
        if [[ "${{ matrix.platform }}" != "windows" ]] && [ -f "mcp-perplexity" ]; then
          echo "Found mcp-perplexity binary, renaming to ${{ matrix.artifact_name }}"
          mv "mcp-perplexity" "${{ matrix.artifact_name }}"
        # For Windows
        elif [[ "${{ matrix.platform }}" == "windows" ]] && [ -f "mcp-perplexity.exe" ]; then
          echo "Found mcp-perplexity.exe, renaming to ${{ matrix.artifact_name }}"
          mv "mcp-perplexity.exe" "${{ matrix.artifact_name }}"
        else
          echo "WARNING: Could not find expected binary to rename!"
          # Look for any executable files as a fallback
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            # Find any .exe file
            for file in *.exe; do
              if [ -f "$file" ]; then
                echo "Found $file, renaming to ${{ matrix.artifact_name }}"
                mv "$file" "${{ matrix.artifact_name }}"
                break
              fi
            done
          else
            # Find any executable without extension
            for file in *; do
              if [ -f "$file" ] && [ -x "$file" ] && [[ ! "$file" == *.* ]]; then
                echo "Found $file, renaming to ${{ matrix.artifact_name }}"
                mv "$file" "${{ matrix.artifact_name }}"
                break
              fi
            done
          fi
        fi
        
        # Verify the result
        echo "Final files in directory:"
        ls -la
      shell: bash

    - name: Generate checksums
      run: |
        cd dist/${{ matrix.platform }}
        if [[ "${{ matrix.platform }}" == "macos" ]]; then
          # On macOS, use shasum but format output to match sha256sum format
          for file in *; do
            if [ -f "$file" ]; then
              shasum -a 256 "$file" | awk '{print $1"  "$2}' >> ../${{ matrix.platform }}.sha256
            fi
          done
        else
          # On Linux and Windows, use sha256sum
          sha256sum * > ../${{ matrix.platform }}.sha256
        fi
      shell: bash
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries-${{ matrix.platform }}
        path: |
          dist/${{ matrix.platform }}/*
          dist/${{ matrix.platform }}.sha256
        retention-days: 5

  release-assets:
    needs: [release, build]
    runs-on: ubuntu-latest
    if: needs.release.outputs.released == 'true'
    permissions:
      contents: write
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: 'binaries-*'
        merge-multiple: true
        path: artifacts
    
    - name: Debug - List files in artifacts directory
      run: |
        echo "Listing all files in artifacts directory:"
        find artifacts -type f | sort
    
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/*/mcp-perplexity-*
          artifacts/*.sha256
        tag_name: v${{ needs.release.outputs.version }}

  publish:
    needs: [release, build, release-assets]
    if: needs.release.outputs.released == 'true'
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/mcp-perplexity
    permissions:
      id-token: write

    steps:
    - name: Download built distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        packages-dir: dist/
        verbose: true
